<?php

/**
 * Implements hook_menu().
 */
function gsb_section_autoconfig_menu() {
  $items['admin/config/workbench/gsb_section_autoconfig'] = array(
    'title' => 'GSB Section Autoconfig Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_section_autoconfig_form'),
    'access arguments' => array('administer gsb section autoconfig'),
    'file' => 'gsb_section_autoconfig.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_section_autoconfig_permission() {
  return array(
    'administer gsb section autoconfig' => array(
      'title' => t('Administer GSB Section Autoconfig'),
      'description' => t('Perform administration tasks for GSB Section Autoconfig'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function gsb_section_autoconfig_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_form_term':
      if (empty($form['delete'])) {
        $form['field_workbench_section_path']['#states'] = array(
          'visible' => array(
            ':input[name="field_workbench_section_use_menu[und]"]' => array('checked' => TRUE),
          ),
        );

        $form['#submit'][] = 'gsb_section_autoconfig_taxonomy_term_form_submit';
      }

      break;
  }
}

/**
 * Submit handler for the menu item page. So we can process workbench_access
 * settings that are applied in the menu items.
 */
function gsb_section_autoconfig_taxonomy_term_form_submit($form, &$form_state) {

  // only need to run if workbench_access is set for this menu.
  if (!empty($form_state['values']['workbench_access'])) {
    $options = array(
      'section' => $form_state['values']['tid'],
      'use_menu' => !empty($form_state['values']['field_workbench_section_use_menu']['und'][0]['value']) ? TRUE : FALSE,
      'name' => $form_state['values']['name'],
      'old_name' => !empty($form_state['complete form']['name']['#default_value']) ? $form_state['complete form']['name']['#default_value'] : '',
      'path' => !empty($form_state['values']['field_workbench_section_path']['und'][0]['value']) ? $form_state['values']['field_workbench_section_path']['und'][0]['value'] : '',
      'old_path' => !empty($form_state['complete form']['field_workbench_section_path']['und'][0]['value']['#default_value']) ? $form_state['complete form']['field_workbench_section_path']['und'][0]['value']['#default_value'] : '',
    );
    _gsb_section_autoconfig_process_section($options);
  }
}

/**
 * Adds menus, roles and permissions when a new section is created.
 */
function _gsb_section_autoconfig_process_section($options = array('section' => '', 'use_menu' => FALSE, 'name' => '', 'old_name' => '', 'path' => '', 'old_path' => '')) {
  $section_name = $options['name'] . ':' . $options['section'];
  $old_section_name = $options['old_name'] . ':' . $options['section'];
  $menu_machine_name = 'section-' . $options['section'];
  $path = !empty($options['path']) ? "{$options['path']}\r\n{$options['path']}/*" : '';
  $region = (empty($path) || !$options['use_menu']) ? -1 : 'sidebar_first';
  $status = ($region == -1) ? 0 : 1;

  static $menus;
  if (!isset($menus)) {
    $menus = menu_get_menus();
  }

  $has_menu = in_array($section_name, $menus);

  // If a menu has been created check for any updates that might be needed.
  // If it hasn't been created add the menu and move the block into the correct
  // region.
  if ($options['use_menu'] && $has_menu) {
    // Check if the section name has changed.
    if ($section_name !== $old_section_name) {
      // Change the menu name.
      if ($menu = menu_load($menu_machine_name)) {
        $menu['title'] = $section_name;
        menu_save($menu);
      }
    }

    // Update path in block.
    db_update('block')
      ->fields(array('pages' => $path, 'region' => $region, 'status' => $status))
      ->condition('module', 'menu')
      ->condition('delta', $menu_machine_name)
      ->execute();
  }
  else if ($options['use_menu'] && !$has_menu) {
    $menu = array(
      'menu_name' => $menu_machine_name,
      'title' => $section_name,
      'description' => 'Menu that manages the ' . $options['name'] . ' section.',
    );
    menu_save($menu);

    // Move menu into the correct block location.
    $values = array(
      'module' => 'menu',
      'delta' => $menu_machine_name,
      'theme' => variable_get('theme_default', ''),
      'status' => 1,
      'region' => $region,
      'visibility' => 1,
      'pages' => $path,
      'title' => 'Section menu',
      'cache' => -1,
    );

    drupal_write_record('block', $values);

    // Add the menu to the list of available menus on the nodes.
    $node_types = variable_get('gsb_section_autoconfig_node_types', array());

    foreach ($node_types as $node_type) {
      $menu_options = variable_get('menu_options_' . $node_type, array());
      if (!in_array($menu_machine_name, $menu_options)) {
        $menu_options[] = $menu_machine_name;
        variable_set('menu_options_' . $node_type, $menu_options);
      }
    }
  }
  else if (!$options['use_menu'] && $has_menu) {
    // Update path in block.
    db_update('block')
      ->fields(array('region' => $region, 'status' => $status))
      ->condition('module', 'menu')
      ->condition('delta', $menu_machine_name)
      ->execute();
  }


  // Create or update roles.
  static $roles;
  if (!isset($roles)) {
    $roles = user_roles();
  }

  // If a role has been created check for any updates that might be needed.
  // If it hasn't been created add the role and assign it to the section.
  // Also give the role permissions to the menus.
  if (in_array($section_name, $roles)) {
    // Check if the section name has changed.
    if ($section_name !== $old_section_name) {
      // Change the role name.
      if ($role = user_role_load_by_name($old_section_name)) {
        $role->name = $section_name;
        user_role_save($role);
      }
    }
  }
  else {
    $role = new stdClass();
    $role->name = $section_name;
    user_role_save($role);

    // Allow role to be added to sections.
    user_role_grant_permissions($role->rid, array('access workbench access by role'));

    // Add role to workbench access section.
    workbench_access_role_section_save($role->rid, $options['section'], 'taxonomy');

    // Add an administrator
    $roles = user_roles();
    $rid = array_search('administrator', $roles);
    // Add role to workbench access section.
    workbench_access_role_section_save($rid, $options['section'], 'taxonomy');

    // Add marketing_admin
    $rid = array_search('marketing_admin', $roles);
    // Add role to workbench access section.
    workbench_access_role_section_save($rid, $options['section'], 'taxonomy');    

    // Make the role hidden.
    $hidden_roles = variable_get('role_hide', array());
    if (!in_array($role->rid, $hidden_roles)) {
      $hidden_roles[] = $role->rid;
      variable_set('role_hide', $hidden_roles);
    }

    if ($options['use_menu']) {
      // Give the role permissions to the menu.
      $fields = array(
        'menu_name' => $menu_machine_name,
        'rid' => $role->rid,
      );
      db_insert('advanced_menu_menu_admin_roles')
        ->fields($fields)
        ->execute();

      // Add the administrator role.
      $admin = user_role_load_by_name('administrator');
      $fields['rid'] = $admin->rid;
      db_insert('advanced_menu_menu_admin_roles')
        ->fields($fields)
        ->execute();

      // Add the marketing_admin role.
      $marketing_admin = user_role_load_by_name('marketing_admin');
      $fields['rid'] = $marketing_admin->rid;
      db_insert('advanced_menu_menu_admin_roles')
        ->fields($fields)
        ->execute();        

      menu_rebuild();
    }
  }
}

/**
 * Adds a node type to be managed.
 *
 * @param $type
 *   The node type machine name.
 *
 * @return
 *   Boolean where TRUE is the type was added and FALSE is where it already
 *   exists.
 */
function gsb_section_autoconfig_add_manage_node_type($type) {
  $node_types = variable_get('gsb_section_autoconfig_node_types', array());
  if (!in_array($type, $node_types)) {
    $node_types[$type] = $type;
    variable_set('gsb_section_autoconfig_node_types', $node_types);

    return TRUE;
  }

  return FALSE;
}

/**
 * Responds to the deletion of a Workbench Access section.
 *
 * This hook fires whenever we delete an access control section.
 * Note that this hook fires _before_ the base tables are cleared,
 * in case you need to retrieve data from those tables.
 *
 * @param $section
 *   Section data as defined by hook_workbench_access_info().
 */
function gsb_section_autoconfig_workbench_access_delete($section) {
  // Notify our module if the section is related to taxonomy.
  if ($section['access_type'] == 'taxonomy') {
    // Update path in block.
    db_update('block')
      ->fields(array('region' => -1, 'status' => 0))
      ->condition('module', 'menu')
      ->condition('delta', 'section_' . $section['access_id'])
      ->execute();

    // Remove role
    if ($term = taxonomy_term_load($section['access_id'])) {
      user_role_delete($term->name . ':' . $term->tid);
    }
  }
}
